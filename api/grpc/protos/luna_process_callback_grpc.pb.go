// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LunaCallbackServiceClient is the client API for LunaCallbackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LunaCallbackServiceClient interface {
	DoCallback(ctx context.Context, in *CallbackRequest, opts ...grpc.CallOption) (*CallbackReply, error)
}

type lunaCallbackServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLunaCallbackServiceClient(cc grpc.ClientConnInterface) LunaCallbackServiceClient {
	return &lunaCallbackServiceClient{cc}
}

func (c *lunaCallbackServiceClient) DoCallback(ctx context.Context, in *CallbackRequest, opts ...grpc.CallOption) (*CallbackReply, error) {
	out := new(CallbackReply)
	err := c.cc.Invoke(ctx, "/proto.luna.process.callback.LunaCallbackService/DoCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LunaCallbackServiceServer is the server API for LunaCallbackService service.
// All implementations should embed UnimplementedLunaCallbackServiceServer
// for forward compatibility
type LunaCallbackServiceServer interface {
	DoCallback(context.Context, *CallbackRequest) (*CallbackReply, error)
}

// UnimplementedLunaCallbackServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLunaCallbackServiceServer struct {
}

func (UnimplementedLunaCallbackServiceServer) DoCallback(context.Context, *CallbackRequest) (*CallbackReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoCallback not implemented")
}

// UnsafeLunaCallbackServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LunaCallbackServiceServer will
// result in compilation errors.
type UnsafeLunaCallbackServiceServer interface {
	mustEmbedUnimplementedLunaCallbackServiceServer()
}

func RegisterLunaCallbackServiceServer(s grpc.ServiceRegistrar, srv LunaCallbackServiceServer) {
	s.RegisterService(&LunaCallbackService_ServiceDesc, srv)
}

func _LunaCallbackService_DoCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LunaCallbackServiceServer).DoCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.luna.process.callback.LunaCallbackService/DoCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LunaCallbackServiceServer).DoCallback(ctx, req.(*CallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LunaCallbackService_ServiceDesc is the grpc.ServiceDesc for LunaCallbackService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LunaCallbackService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.luna.process.callback.LunaCallbackService",
	HandlerType: (*LunaCallbackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoCallback",
			Handler:    _LunaCallbackService_DoCallback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/protos/luna_process_callback.proto",
}
